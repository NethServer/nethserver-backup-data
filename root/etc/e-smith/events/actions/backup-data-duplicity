#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use File::Temp;
use Time::localtime;
use NethServer::BackupData;

use constant CMD => '/usr/bin/duplicity';
use constant DEBUG => 0;

my $name = $ARGV[0] || die("No name given");

my $confdb = esmith::ConfigDB->open;
my $systemname = $confdb->get('SystemName') or die "No SystemName db entry found\n";
$systemname = $systemname->prop('type');

my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
my $backupwk = $db->get($name) || die("No backup '$name' found");
my $cacheDir = "/var/lib/nethserver/backup/duplicity/$name/";
my $mntdir = "/mnt/backup-$name";
my $dst = " file://$mntdir/$systemname ";

my $tm = localtime(time);
my $dow = $tm->wday;

my $type = $backupwk->prop('Type') || 'full';
my $VFSType = $backupwk->prop('VFSType') || 'UNKNOWN';
my $fullday = $backupwk->prop('FullDay') || 0;
my $volSize = $backupwk->prop('VolSize') || '250';
my $opts = '--allow-source-mismatch';

our $backup = new NethServer::BackupData();

if ($type eq 'full') {
     # do full
     $opts .= " full ";
} elsif ($type eq 'incremental') {
    if ($dow == $fullday) { #force full on selected week day
        # do full
        $opts .= " full ";
    } else {
        # do incremental
        $opts .= " incr ";
    }
} else { # nothing to do
    error("Backup type unknown: $type");
}


# Read include and exclude from default directory or customized file
my @include_data_files;
my @exclude_data_files;

if ( -f "/etc/backup-data/$name.include" ) {
    @include_data_files = $backup->load_file_list("/etc/backup-data/$name.include");
} else {
    @include_data_files = $backup->includes($backup->get_config_dir());
}

if ( -f "/etc/backup-data/$name.exclude" ) {
    @exclude_data_files = $backup->load_file_list("/etc/backup-data/$name.exclude");
} else {
    @exclude_data_files = $backup->excludes($backup->get_config_dir());
}

if (!@include_data_files) {
    error("Nothing to backup");
}

# Create globbing file list
my $tmp = File::Temp->new(UNLINK => 1);
chmod(0600,$tmp->filename);

$backup->uniq(\@include_data_files);
$backup->uniq(\@exclude_data_files);

foreach  (@exclude_data_files) {
   print $tmp "- $_\n";
}
foreach  (@include_data_files) {
   print $tmp "+ $_\n";
}
print $tmp "- **\n";

$opts .= " --exclude=/var/lib/nethserver/backup/duplicity/ --include-filelist $tmp";
$opts .= " --volsize $volSize ";

if ( ! -x "/etc/e-smith/events/actions/mount-$VFSType" ) {
   error("No valid VFSType: $VFSType");
}

my $ret_mnt = system("/etc/e-smith/events/actions/mount-$VFSType fake-event $name");
if ($ret_mnt > 0) {
    error("Can't mount $mntdir");
}
mkdir "$mntdir/$systemname";

# force full backup if not exists > 8 days
$opts .= " --full-if-older-than 8D ";
# disable encryption
$opts .= " --no-encryption ";
# set duplicity cache dir
$opts .= " --archive-dir $cacheDir ";

# remove stale duplicity lockfile
unlink glob "$cacheDir/*/lockfile.lock";

if (DEBUG) {
    $opts .= "-v8 ";
    print CMD." $opts / $dst\n";
} else {
    $opts .= "-v2 ";
}

my $ret = system(CMD." $opts / $dst");

if ($ret != 0) {
   error("Duplicity backup failed");
}

if ( -x "/etc/e-smith/events/actions/umount-$VFSType" ) {
    $backup->disk_usage($name);
    system("/etc/e-smith/events/actions/umount-$VFSType fake-event $name");
}

exit (0);

sub error {
    my $msg = shift;
    print sprintf("$msg\n",@_);
    exit 1;
}
