#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use File::Temp;
use Time::localtime;
use NethServer::BackupData;

use constant CMD => '/usr/bin/duplicity';

# The action must be invoked at least with 1 parameter: an event name (could be a fake one)
# If a second parameter is passed, it must be a valid key inside the backups db
my $event = shift || die("No event given");
my $name = shift || die("No name given");

my $opts = '';

my $confdb = esmith::ConfigDB->open;
my $systemname = $confdb->get('SystemName') or die "No SystemName db entry found\n";
$systemname = $systemname->prop('type');

my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
my $backupwk = $db->get($name) || die("No backup '$name' found");
my $cacheDir = "/var/lib/nethserver/backup/duplicity/$name/";
my $mntdir = "/mnt/backup-$name";
my $dst = " file://$mntdir/$systemname ";

my $cot = $backupwk->prop('CleanupOlderThan') || 'never';

# skip all if cleanup is not set
exit(0) unless($cot ne "never");

# set duplicity cache dir
$opts .= " --archive-dir $cacheDir ";
my $ret = system(CMD." remove-older-than $cot $opts $dst --force");

if ($ret != 0) {
   error("Cleanup of old backup failed");
}
$ret = system(CMD." cleanup --no-encryption $opts $dst --force");
if ($ret != 0) {
   error("Metadata cleanup failed");
}

exit (0);

sub error {
    my $msg = shift;
    print sprintf("$msg\n",@_);
    exit 1;
}

