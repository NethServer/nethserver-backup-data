#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupData;
use NethServer::BackupConfig;
use File::Path  qw(make_path);
use File::Basename;
use Getopt::Std;

sub print_help
{
    print "Usage $0 [-t <days>] [-h] <target_dir> <file_to_restore> ... <file_to_restore>\n";
    print "  -t : specify the time from which to restore or list files\n";
    print "  -h : show this help\n";
}

my %options=();
getopts("ht:", \%options);
my $help = $options{h};
my $time = $options{t} || '';

if ($help)
{
  print_help();
  exit(0);
}

use constant CMD => '/usr/bin/duplicity';

my $position = shift @ARGV || '/';
my @files = @ARGV;

my $confdb = esmith::ConfigDB->open;
my $systemname = $confdb->get('SystemName') or die "No SystemName db entry found\n";
$systemname = $systemname->prop('type');
my $backupwk = $confdb->get('backup-data') or die "No backup-data db entry found\n";


my $type = $backupwk->prop('Type') || 'full';
my $forceFull = $backupwk->prop('ForceFull') || 'enabled';
my $VFSType = $backupwk->prop('VFSType') || 'UNKNOWN';
my $mntdir = $backupwk->prop('Mount') || '/mnt/backup';
my $logFile = '/var/log/restore.log'; # duplicity output
my $opts = '';
my $src = "";

my $backup = new NethServer::BackupData();
$backup->set_log_file('/var/log/restore-data.log');


if ( ($VFSType eq 'usb') || ($VFSType eq 'nfs') || ($VFSType eq 'cifs') || ($VFSType eq 'webdav') ) {
   $src = " file://$mntdir/$systemname ";
} else {
   $backup->bad_exit("No valid VFSType ($VFSType)",1);
}

# disable encryption
$opts .= " --no-encryption ";
# set duplicity cache dir
$opts .= " --archive-dir /var/lib/nethserver/backup/duplicity/ ";
if ($time) {
    $opts .= " -t $time ";
}
# add log file
if ( -e $logFile) {
   unlink($logFile);
}

my $ret;
my $cmd = CMD." restore $opts ";

if (@files) {  # restore selected files
    foreach (@files) {
        $cmd = CMD." restore $opts ";
        my($filename, $directories, $suffix) = fileparse($_);
        if ($position eq "/") {
            make_path("/$directories");
            $cmd .= " --force --file-to-restore '$_' $src /'$_'";
        } else {
            make_path("$position/$directories");
            $cmd .= " --file-to-restore '$_' $src $position/'$_'";
        }
        $ret += system("$cmd &>>$logFile");
    } 
} else { # restore all
   if ($position eq "/") {
       $cmd .= " --force $src /";
   } else {
       $cmd .= " $src $position/";
   }
   $ret = system("$cmd &>$logFile");
}

if ($ret != 0) {
   $backup->bad_exit("Restore failed, see $logFile for details",$ret); 
}

exit (0);

