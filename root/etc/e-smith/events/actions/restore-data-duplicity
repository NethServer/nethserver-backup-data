#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupData;
use NethServer::BackupConfig;
use File::Path  qw(make_path);
use File::Basename;
use Getopt::Std;

sub print_help
{
    print "Usage $0 [-t <days>] [-b <backup_name>] [-h] <target_dir> <file_to_restore> ... <file_to_restore>\n";
    print "  -t : specify the time from which to restore or list files\n";
    print "  -b : specify the name of backup to restore\n";
    print "  -h : show this help\n";
}

my %options=();
getopts("ht:b:", \%options);
my $help = $options{h};
my $time = $options{t} || '';
my $name = $options{b} || die("No name given");

if ($help)
{
  print_help();
  exit(0);
}

use constant CMD => '/usr/bin/duplicity';

my $position = shift @ARGV || '/';
my @files = @ARGV;

my $confdb = esmith::ConfigDB->open;
my $systemname = $confdb->get('SystemName') or die "No SystemName db entry found\n";
$systemname = $systemname->prop('type');

my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
my $backupwk = $db->get($name) || die("No backup '$name' found");
my $mntdir = "/mnt/backup-$name";

my $type = $backupwk->prop('Type') || 'full';
my $forceFull = $backupwk->prop('ForceFull') || 'enabled';
my $VFSType = $backupwk->prop('VFSType') || 'UNKNOWN';
my @opts;
my $src = "file://$mntdir/$systemname";

my $backup = new NethServer::BackupData();

# disable encryption
push(@opts,"--no-encryption");
# set duplicity cache dir
push(@opts, '--archive-dir', "/var/lib/nethserver/backup/duplicity/$name");
if ($time) {
    push(@opts, '-t', $time);
}

my $ret;
my @cmd = (CMD, 'restore', @opts);

if ( -x "/etc/e-smith/events/actions/mount-$VFSType" ) {
   system("/etc/e-smith/events/actions/mount-$VFSType fake-event $name");
}

if (@files) {  # restore selected files
    foreach (@files) {
        @cmd = (CMD, 'restore', @opts);
        my($filename, $directories, $suffix) = fileparse($_);
        if ($position eq "/") {
            make_path("/$directories");
            push(@cmd, '--force', '--file-to-restore', $_, $src, '/'.$_);
        } else {
            make_path("$position/$directories");
            push(@cmd, '--file-to-restore', $_, $src, $position.'/'.$_);
        }
        $ret += system(@cmd);
    } 
} else { # restore all
   if ($position eq "/") {
       push(@cmd, '--force', $src, '/');
   } else {
       push(@cmd, $src,  $position.'/');
   }
   $ret = system(@cmd);
}

if ($ret != 0) {
   exit $ret;
}

if ( -x "/etc/e-smith/events/actions/umount-$VFSType" ) {
   system("/etc/e-smith/events/actions/umount-$VFSType fake-event $name");
}

exit (0);

