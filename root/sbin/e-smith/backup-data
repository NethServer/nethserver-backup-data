#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupData;
use POSIX qw/strftime floor/;
use JSON;
use Getopt::Std;

use constant MAX_TIME => 300;
use constant DEBUG => 0;

sub help_message
{
    my $backup_command_list = "";
    foreach ($_[0]->get_all()) {
        $backup_command_list .= "  $0 -b " . $_->key . "\n"
    }

    my $appendix = "";

    if (length($backup_command_list)) {
        $appendix = "Use one of the following commands:\n" . $backup_command_list
    } else {
        $appendix = "There is no backup configuration\n"
    }

    return "Usage $0 [-b <backup_name>] [-h]\n" .
            "  -b : specify the name of backup to use\n" .
            "  -h : show this help\n\n" .
            $appendix
}

my %options=();
getopts("hb:", \%options);
my $help = $options{h};
my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");

if (defined $help)
{
  print help_message($db);
  exit(0);
}

my $name = $options{b} || die(help_message($db));
my $status;
my %du;
my $timeout = 0;
my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
my $backup = $db->get($name) || die("No backup '$name' found");
my $program = $backup->prop('type') || 'duplicity';

# Fail early if backup disabled since nfs, cifs and usb mounts will not be avaible
my $backup_status = $backup->prop('status') || 'disabled';
die("Backup $name is disabled") if ($backup_status eq 'disabled');

out("Backup: $name");
my $duLogFile = "/var/spool/backup/disk_usage-$name";

$backup = new NethServer::BackupData();


my $start = time;
out("Backup started at %s", strftime('%F %T',localtime));

# if there is a pre-backup-data running, wait for it
do {
    sleep(1);
    $timeout++;
    if ($timeout >= MAX_TIME) {
        error("Timeout while waiting pre-backup-data");
    }
} while ($backup->is_running('/sbin/e-smith/signal-event pre-backup-data',1));

# if there are other backup still running, no need to execute pre-backup-data again
if (!$backup->is_running('backup-data')) {
    if ($status = system("/sbin/e-smith/signal-event pre-backup-data $name"))
    {
        error("Event pre-backup-data: FAIL");
    }
    out("Pre backup scripts status: SUCCESS");
} else {
    out("Pre backup scripts status: SKIPPED (concurrent backup is running)");
}

if ($status = system("/etc/e-smith/events/actions/backup-data-$program $name"))
{
    error("Action 'backup-data-$program $name': FAIL");
}
out("Action 'backup-data-$program $name': SUCCESS");

# if there are other backup still running, only last process will execute post-backup-data
if (!$backup->is_running('backup-data')) {
    if ($status = system("/sbin/e-smith/signal-event post-backup-data $name"))
    {
        error("Event post-backup-data: FAIL");
    }
    out("Post backup scripts status: SUCCESS");
} else {
    out("Post backup scripts status: SKIPPED (concurrent backup is running)");
}

out("Backup status: SUCCESS");
out("Backup ended at %s", strftime('%F %T',localtime));
my $duration = time - $start;
out("Time elapsed: %s hours, %s minutes, %s seconds", (floor($duration/(60*60))), ($duration/60)%60, $duration%60);

# disk usage stats
if ( open(FILE, "<$duLogFile") ) {
    %du = %{decode_json(join('', <FILE>))};
    close(FILE);
    if ($du{'size'}) { $du{'size'} = format_bytes($du{'size'}*1024); }
    if ($du{'used'}) { $du{'used'} = format_bytes($du{'used'}*1024); }
    if ($du{'avail'}) { $du{'avail'} = format_bytes($du{'avail'}*1024); }
    if ($du{'pcent'}) { $du{'pcent'} .= '%'; }
    out("\nDisk Usage:\n%10s %10s %10s %8s", 'Size', 'Used', 'Available', 'Use%');
    out("%10s %10s %10s %8s", $du{'size'}||'-', $du{'used'}||'-', $du{'avail'}||'-', $du{'pcent'}||'-');
}


exit 0;

sub format_bytes {
    my $size = shift;
    my $exp = 0;

    CORE::state $units = [qw(B KB MB GB TB PB EB ZB YB)];

    for (@$units) {
        last if $size < 1024;
        $size /= 1024;
        $exp++;
    }

    return wantarray ? ($size, $units->[$exp]) : sprintf("%.2f %s", $size, $units->[$exp]);
}


sub out {
    my $msg = shift;
    print sprintf("$msg\n",@_);
}

sub error {
    out(@_);
    out("Backup status: FAIL");
    exit 1;
}
