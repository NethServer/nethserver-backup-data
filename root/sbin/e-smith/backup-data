#! /usr/bin/perl -w
#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use NethServer::BackupData;
use POSIX qw/strftime/;
use JSON;

my $conf = esmith::ConfigDB->open || die("Could not open config db\n");
my $backup = $conf->get('backup-data');
my $program = $backup->prop('Program') || 'duplicity';
# valid values for notify are: always, error, never
my $notify = $backup->prop('notify') || 'error';
my $notify_to = $backup->prop('notifyTo') || 'root';
my $notify_from = $backup->prop('notifyFrom') || 'root';
my $logFile = $backup->prop('LogFile') || '/var/log/last-backup.log';
my $status;
my %du;
my $duLogFile = '/var/lib/nethserver/backup/disk_usage';

$backup = new NethServer::BackupData($notify, $notify_to, $notify_from);

if ($backup->is_running('backup-data')) {
    print "Another backup is already running.\n";
    exit 1;
}

# remove log file
if ( -e $logFile) {
   unlink($logFile);
}

# Make sure configuration backup is updated
system('/sbin/e-smith/backup-config');


$backup->cleanup_notification();
$backup->notify("===== Report for data backup =====\n");

my $start = time;
$backup->notify("Backup started at %s", strftime('%F %T',localtime));
$backup->logger("START","Backup data started");

if ($status = system(qw(/sbin/e-smith/signal-event pre-backup-data)))
{
    $backup->notify("Pre backup scripts status: ERROR");
    $backup->bad_exit("Event pre-backup-data failed", $status>>8);
}
$backup->logger("STEP","pre-backup-done done");
$backup->notify("Pre backup scripts status: SUCCESS");

if ($status = system("/etc/e-smith/events/actions/backup-data-$program"))
{
    $backup->notify("Backup script status: ERROR");
    $backup->bad_exit("Action backup-data-$program failed", $status>>8, $logFile);
}
$backup->logger("STEP","backup-data-$program done");

if ($status = system(qw(/sbin/e-smith/signal-event post-backup-data)))
{
    $backup->notify("Post backup scripts status: ERROR");
    $backup->bad_exit("Event post-backup-data failed", $status>>8);
}
$backup->notify("Post backup scripts status: SUCCESS");

$backup->logger("SUCCESS","Backup done");
$backup->notify("Backup status: SUCCESS");
$backup->notify("Backup ended at %s", strftime('%F %T',localtime));
my $duration = time - $start;
$backup->notify("Time elapsed: %s hours, %s minutes, %s seconds", ($duration/(60*60))%24, ($duration/60)%60, $duration%60);

# disk usage stats
if ( open(FILE, "<$duLogFile") ) {
    %du = %{decode_json(join('', <FILE>))};
    close(FILE);
    if ($du{'size'}) { $du{'size'} = format_bytes($du{'size'}*1024); }
    if ($du{'used'}) { $du{'used'} = format_bytes($du{'used'}*1024); }
    if ($du{'avail'}) { $du{'avail'} = format_bytes($du{'avail'}*1024); }
    if ($du{'pcent'}) { $du{'pcent'} .= '%'; }
} else {
    warn("[WARNING] Could not open $duLogFile\n");
}
$backup->notify("\nDisk Usage:\n%10s %10s %10s %8s", 'Size', 'Used', 'Available', 'Use%');
$backup->notify("%10s %10s %10s %8s", $du{'size'}||'-', $du{'used'}||'-', $du{'avail'}||'-', $du{'pcent'}||'-');


$backup->send_notification(0,$logFile);


exit 0;

sub format_bytes {
    my $size = shift;
    my $exp = 0;

    CORE::state $units = [qw(B KB MB GB TB PB EB ZB YB)];

    for (@$units) {
        last if $size < 1024;
        $size /= 1024;
        $exp++;
    }

    return wantarray ? ($size, $units->[$exp]) : sprintf("%.2f %s", $size, $units->[$exp]);
}
