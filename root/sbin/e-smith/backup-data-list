#!/usr/bin/perl -w

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use esmith::ConfigDB;
use File::Temp;
use Getopt::Std;

sub print_help
{
    print "Usage $0 [-f] [-b <backup_name>] [-h]\n";
    print "  -f : print in parsable format\n";
    print "  -b : specify the name of backup to list\n";
    print "  -h : show this help\n";
}

my %options=();
getopts("hfb:", \%options);
my $help = $options{h};
my $formatted = $options{f} || '';
my $name = $options{b} || die("No name given");

if ($help)
{
  print_help();
  exit(0);
}

my $confdb = esmith::ConfigDB->open || die("Could not open config db\n");
my $db = esmith::ConfigDB->open_ro('backups') || die("Could not open backups db\n");
my $backup = $db->get($name) || die("No backup '$name' found");
my $program = $backup->prop('type') || 'duplicity';
my $opts .= "-b $name ";

if ($formatted) {
   $opts .= " -f ";
}

my $VFSType = $backup->prop('VFSType') || 'UNKNOWN';
my $mntdir = $backup->prop('Mount') || '/mnt/backup';


if (-x "/etc/e-smith/events/actions/mount-$VFSType") {
    system("/etc/e-smith/events/actions/mount-$VFSType fake-event $name");
}

my $ret = system("/etc/e-smith/events/actions/backup-data-list-$program $opts");

if (-x "/etc/e-smith/events/actions/umount-$VFSType") {
    system("/etc/e-smith/events/actions/umount-$VFSType fake-event $name");
}

if ($ret > 0) {
    exit (0);
} else {
    exit (1);
}

